# -*- coding: utf-8 -*-
"""FitAdvisor_Colab_Final_Herramientas_Extendidas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dFSRieWuJ6nPMjVYbgGMGA9Ys3y-0KTi

# 🤖 FitAdvisor AI – Backend Completo con Tavily, Wikipedia, YouTube y CSV Deportivo
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -qU langgraph-checkpoint-postgres

#3-Cargar los API-KEYS
# Cargar API Key OpenAI
import os

openai_api_key = os.environ.get("OPENAI_API_KEY")
tavily_api_key = os.environ.get("TAVILY_API_KEY")

os.environ["OPENAI_API_KEY"] = openai_api_key
os.environ["TAVILY_API_KEY"] = tavily_api_key

# ✅ Cargar las claves
openai_api_key = os.environ["OPENAI_API_KEY"]
tavily_api_key = os.environ["TAVILY_API_KEY"]

# Modelos
from langchain_openai import ChatOpenAI

# Agentes y herramientas
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.tools import Tool

# Prompts
from langchain.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, SystemMessagePromptTemplate

# Herramientas externas
from langchain_community.utilities import WikipediaAPIWrapper
from langchain_community.tools import DuckDuckGoSearchRun, WikipediaQueryRun, YouTubeSearchTool
from langchain.tools.tavily_search import TavilySearchResults

# ✅ NUEVA MEMORIA CLOUD
from langgraph.checkpoint.postgres import PostgresSaver
from psycopg_pool import ConnectionPool

DB_URI = os.environ.get("POSTGRES_URL")

connection_kwargs = {
    "autocommit": True,
    "prepare_threshold": 0,
}

# Crear el pool y el checkpointer para guardar memoria
pool = ConnectionPool(conninfo=DB_URI, max_size=20, kwargs=connection_kwargs)
checkpointer = PostgresSaver(pool)
checkpointer.setup()

# ## [checkpoint_blobs, checkpoint_migrations, checkpoint_writes, checkpoints] en el esquema public
# #Variables de memoria
# connection_kwargs = {
#     "autocommit": True,
#     "prepare_threshold": 0,
# }
# # Inicializamos la memoria
# with ConnectionPool(
#     # Example configuration
#     conninfo=DB_URI,
#     max_size=20,
#     kwargs=connection_kwargs,
# ) as pool:
#     checkpointer = PostgresSaver(pool)
#     checkpointer.setup()

# #Variables de memoria
# connection_kwargs = {
#     "autocommit": True,
#     "prepare_threshold": 0,
# }
# # Inicializamos la memoria
# with ConnectionPool(
#     # Example configuration
#     conninfo=DB_URI,
#     max_size=20,
#     kwargs=connection_kwargs,
# ) as pool:
#     checkpointer = PostgresSaver(pool)

#     # Inicializamos el modelo
#     model = ChatOpenAI()

from langchain_core.tools import tool

@tool
def buscar_producto(nombre: str) -> str:
    """
    Busca información sobre un producto usando Tavily, YouTube y DuckDuckGo.
    """
    resultado = f"🔍 **Buscando información sobre:** _'{nombre}'_\n"

    try:
        resultado += "\n**🌐 Tavily:**\n" + TavilySearchResults().run(nombre)
    except Exception as e:
        resultado += f"\n(No se pudo consultar Tavily)\n"

    try:
        resultado += "\n**🔍 DuckDuckGo:**\n" + DuckDuckGoSearchRun().run(nombre)
    except Exception as e:
        resultado += f"\n(No se pudo consultar DuckDuckGo)\n"

    try:
        resultado += "\n**📹 YouTube:**\n" + YouTubeSearchTool().run(nombre)
    except Exception as e:
        resultado += f"\n(No se pudo consultar YouTube)\n"

    return resultado


@tool
def recomendar_suplemento(objetivo: str) -> str:
    """
    Recomienda suplementos deportivos según el objetivo usando Wikipedia, Tavily, YouTube y DuckDuckGo.
    """
    consulta = f"sugerencias de suplementos para {objetivo}"
    resultado = f"🎯 **Objetivo del usuario:** _{objetivo}_\n"

    try:
        resultado += "\n**📚 Wikipedia:**\n" + WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper()).run(consulta)
    except Exception as e:
        resultado += "\n(No se pudo consultar Wikipedia)\n"

    try:
        resultado += "\n**🌐 Tavily:**\n" + TavilySearchResults().run(consulta)
    except:
        resultado += "\n(No se pudo consultar Tavily)\n"

    try:
        resultado += "\n**🔍 DuckDuckGo:**\n" + DuckDuckGoSearchRun().run(consulta)
    except:
        resultado += "\n(No se pudo consultar DuckDuckGo)\n"

    try:
        resultado += "\n**📹 YouTube:**\n" + YouTubeSearchTool().run(consulta)
    except:
        resultado += "\n(No se pudo consultar YouTube)\n"

    return resultado


@tool
def asesor_entrenamiento(pregunta: str) -> str:
    """
    Brinda orientación básica sobre entrenamiento físico usando Wikipedia, Tavily y DuckDuckGo.
    """
    resultado = f"🏋️ **Consulta sobre entrenamiento:** _{pregunta}_\n"

    try:
        resultado += "\n**📚 Wikipedia:**\n" + WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper()).run(pregunta)
    except:
        resultado += "\n(No se pudo consultar Wikipedia)\n"

    try:
        resultado += "\n**🌐 Tavily:**\n" + TavilySearchResults().run(pregunta)
    except:
        resultado += "\n(No se pudo consultar Tavily)\n"

    try:
        resultado += "\n**🔍 DuckDuckGo:**\n" + DuckDuckGoSearchRun().run(pregunta)
    except:
        resultado += "\n(No se pudo consultar DuckDuckGo)\n"

    return resultado


@tool
def consulta_integral(input_usuario: str) -> str:
    """
    Realiza una consulta completa usando Wikipedia, Tavily, DuckDuckGo y YouTube.
    """
    resultado = f"🧠 **Consulta integral sobre:** _{input_usuario}_\n"

    fuentes_usadas = 0

    try:
        wiki_result = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper()).run(input_usuario)
        if "No good Wikipedia Search Result" not in wiki_result:
            resultado += "\n**📚 Wikipedia:**\n" + wiki_result
            fuentes_usadas += 1
        else:
            resultado += "\n(No se encontró información en Wikipedia)\n"
    except:
        resultado += "\n(No se pudo consultar Wikipedia)\n"

    try:
        resultado += "\n**🌐 Tavily:**\n" + TavilySearchResults().run(input_usuario)
        fuentes_usadas += 1
    except:
        resultado += "\n(No se pudo consultar Tavily)\n"

    try:
        resultado += "\n**🔍 DuckDuckGo:**\n" + DuckDuckGoSearchRun().run(input_usuario)
        fuentes_usadas += 1
    except:
        resultado += "\n(No se pudo consultar DuckDuckGo)\n"

    try:
        resultado += "\n**📹 YouTube:**\n" + YouTubeSearchTool().run(input_usuario)
        fuentes_usadas += 1
    except:
        resultado += "\n(No se pudo consultar YouTube)\n"

    if fuentes_usadas == 0:
        resultado += "\n⚠️ _No se obtuvo información útil en ninguna fuente. Intenta reformular tu consulta._"

    return resultado

# 🌐 Herramientas externas
wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())
duckduckgo = DuckDuckGoSearchRun()
tavily = TavilySearchResults()
youtube = YouTubeSearchTool()

# 🔧 Registro de todas las herramientas
tools = [
    buscar_producto,
    recomendar_suplemento,
    asesor_entrenamiento,
    Tool(name="consulta_integral", func=consulta_integral, description="Realiza una consulta completa con todas las fuentes."),
    Tool(name="wikipedia", func=wikipedia.run, description="Consulta temas deportivos y de salud."),
    Tool(name="tavily_web_search", func=tavily.run, description="Busca información reciente en internet."),
    Tool(name="duckduckgo_search", func=duckduckgo.run, description="Búsqueda alternativa con DuckDuckGo."),
    Tool(name="youtube_search", func=youtube.run, description="Busca videos sobre suplementos o ejercicios.")
]

# 🤖 Modelo LLM
llm = ChatOpenAI(model="gpt-4", temperature=0)

# ✅ Prompt personalizado muy detallado y profesional
system_prompt = SystemMessagePromptTemplate.from_template(
    """
Eres un asesor deportivo profesional llamado **FitAdvisor AI** 💪🏽.
Estás entrenado para responder preguntas sobre:

🏋️‍♂️ Rendimiento físico
🥦 Nutrición y alimentación saludable
🧪 Suplementos deportivos
📈 Planes de entrenamiento y objetivos específicos
🥋 Deportes como artes marciales mixtas, running y pesas

Tu tarea es brindar respuestas **profundas, útiles y completas**, utilizando SIEMPRE las herramientas que tienes disponibles. Cada vez que el usuario realice una pregunta, debes usar todas estas herramientas en el siguiente orden:

---

🔎 **1. Wikipedia**
Explica términos clave, nutrientes, suplementos o métodos de entrenamiento. Proporciona contexto técnico y educativo.

🧠 **2. Tavily**
Consulta fuentes actualizadas (noticias, artículos y sitios web recientes). Resume las ideas más relevantes que encuentres.

📹 **3. YouTube**
Recomienda al menos 2 videos útiles relacionados con el tema. Incluye título, enlace y por qué podrían interesarle al usuario.

---

✅ Tu respuesta debe ser clara, organizada y redactada como un profesional del fitness con conocimientos científicos.
✅ Usa emojis, títulos, subtítulos, bullets y lenguaje accesible.
✅ No repitas la pregunta del usuario. Concéntrate en **informar, motivar y guiar**.

❗ Si alguna herramienta falla, indícalo de manera elegante (ej: "Actualmente no se encontró un video relacionado...").

⚠️ Siempre debes usar `consulta_integral` como herramienta principal para procesar la consulta del usuario.
    """
)

# Prompt humano y chat compuesto
human_prompt = HumanMessagePromptTemplate.from_template("{input}\n{agent_scratchpad}")
chat_prompt = ChatPromptTemplate.from_messages([system_prompt, human_prompt])


# ✅ Agente + herramientas (sin memoria local)
agent = create_tool_calling_agent(llm=llm, tools=tools, prompt=chat_prompt)

agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    checkpointer=checkpointer,
    verbose=True,
    return_intermediate_steps=True  # 👈 ESTA ES LA CLAVE
)

# # 🚀 Consulta de ejemplo usando configuración mejorada
# config = {"configurable": {"thread_id": "fitadvisor_session_01"}}

# respuesta = agent_executor.invoke(
#     {"input": "Quiero saber qué suplemento tomar para mejorar mi fuerza y qué ejercicios debo hacer"},
#     config=config
# )

# # Mostrar resultado bonito
# print(respuesta["output"])

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import Optional

app = FastAPI()

# CORS para permitir peticiones desde Vercel
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # o limita al dominio de tu frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def responder(idagente: Optional[str] = "anon", msg: Optional[str] = "Hola"):
    config = {"configurable": {"thread_id": f"session_{idagente}"}}
    respuesta = agent_executor.invoke({"input": msg}, config=config)
    print("⚙️ Respuesta del agente:", respuesta)
    return JSONResponse(content={"message": respuesta["output"]})